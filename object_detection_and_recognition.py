# -*- coding: utf-8 -*-
"""Object_detection_and_recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yxlzo5LOkm012KAz1j1JdpP4iZ_Ium4G
"""

# Commented out IPython magic to ensure Python compatibility.
import cv2 as cv, numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import pandas as pd
import os
import glob

# %matplotlib inline

# Some sources for reference

# https://github.com/search?l=Python&q=Object+detection&type=Repositories
# sources: https://datahack.analyticsvidhya.com/
# https://github.com/analyticsvidhya
# https://github.com/xingyizhou

"""# Import images"""



"""https://arxiv.org/pdf/1904.07850.pdf

Why object detection power many vision tasks
-instance segmentation
-pose estimation
-tracking
-action recognition
"""

def plot_input():

  # input image
  image= np.zeros((512,512,3), np.uint8)
  # Draw a diagonal blue line with thickness of 5 px
  cv.line(image,(0,0),(511,511),(255,0,0),5)
  # Draw a circle
  cv.circle(image,(447,63), 63, (0,0,255), -1)

  # image = mpimg.imread('shapes.jpg')
  # img = cv.imread('shapes.jpg')

  # color space conversions
  gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
  hsv = cv.cvtColor(image, cv.COLOR_BGR2HSV)
  hls = cv.cvtColor(image, cv.COLOR_BGR2HLS)
  yuv = cv.cvtColor(image, cv.COLOR_BGR2YUV)

  # printing out some stats and plotting
  print('This image is:', type(image), 'with dimensions:', image.shape)
  print('This image is:', type(gray), 'with dimensions:', gray.shape)
  print('This image is:', type(hsv), 'with dimensions:', hsv.shape)
  print('This image is:', type(hls), 'with dimensions:', hls.shape)
  print('This image is:', type(yuv), 'with dimensions:', yuv.shape)

  plt.imshow(image)
  plt.imshow(gray)
  plt.imshow(hsv) 
  plt.imshow(hls)
  plt.imshow(yuv)    


  # # OpenCV does not work in Colab
  # cv.imshow(img)
  # cv.waitKey(0)
  # cv.destroyAllWindows()

def img_cvt():

  """ function that will convert imag to different color spaces"""

  image = cv.imread('shapes.jpg')

  gray = cv.COLOR_BGR2GRAY
  hsv = cv.COLOR_BGR2HSV
  hsl = cv.COLOR_BGR2HLS
  yuv = cv.COLOR_BGR2YUV
  
  color_space = [
                 cv.COLOR_BGR2GRAY,
                 cv.COLOR_BGR2HSV,
                 cv.COLOR_BGR2HLS,
                 cv.COLOR_BGR2YUV 
                 ]

  color_space_name = [
                 gray,
                 hsv,
                 hls,
                 yuv ]

  cvt_img = cv.cvtColor(image, color_space_name[0])

  return cvt_img

# plt.imshow(img_cvt())

"""Next : Try to build using classes"""

def img_conversion(self, image):
  """ this function will convert images to a different color space"""
  self.image = cv.imread('shapes.jpg')
  # input image
  # img = cv.imread('shapes.jpg')

  # convert to a differet color space

  # return converted image

  gray = cv.cvtColor(self.image, cv.COLOR_BGR2GRAY)

  return plt.imshow(gray)

def img_filter():
  img = cv.imread('./carlane.jpg')
  kernel_size = (3,3)
  gaussian_blur = cv.GaussianBlur(src = img, ksize = kernel_size, sigmaX = 0 )
  blur = cv.blur(src = img, ksize = (3,3))

  return gaussian_blur, blur

plt.imshow(img_filter()[1])

# Edge detector

thresh1, thresh2 = 255, 255
canny_edges = cv.Canny(img, thresh1, thresh2)

# thresh = cv.threshold(src=img, thresh=thresh1, maxval)
# range = cv.inRange()
# draw_cnt = cv.drawContours()

plt.imshow(canny_edges)

